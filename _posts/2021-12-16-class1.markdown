---
title: "JAVA 객체지향 1"
permalink: /2021-12-16-class1
excerpt: "객체지향 프로그래밍을 위한 클래스"
last_modified_at: 2021-12-16T13:56:18-14:00
toc: true
---
내가 이해하기 위한 JAVA 객체지향 1
## 클래스

public class Animal {

}

클래스 선언만 있어서 껍데기 뿐인 클래스지만 객체(object)를 만드는 기능을 수행 함


Animal cat = new Animal();

new 는 객체를 생성할 때 사용하는 키워드

Animal 클래스의 인스턴스(instance)인 cat
Animal 의 객체 cat
객체 vs 인스턴스 => 클래스에 의해서 만들어진 객체를 인스턴스
cat의 관점으로 봤을 때 cat은 객체. Animal의 관점에서 볼 때는 cat은 인스턴스
인스턴스는 특정 객체가 어떤 클래스의 객체인지 관계를 설명할 때 사용

cat은 Animal의 객체보다는 cat은 Animal의 인스턴스라고 하는게 적절 함

public class Animal {
	string name;
}
name은 객체 변수 (인스턴스 변수, 멤버 변수, 속성)

객체 변수는 도트연산자(.)으로 접근 가능
ex) 객체.객체변수

Animal cat = new Animal()
cat.name; 으로 접근 // 객체 : cat, 객체변수 : name

클래스에는 객체 변수와 더불어 메소드가 있다. 
메소드는 클래스 내에 구현된 함수이다

public class Animal {
	string name;
	
	public void setName(String name){
		this.name = name;
	}

	public static void main(String[] args){
		Animal cat = new Animal();
		System.out.println(cat.name);
	}
}

메소드 호출도 객체 변수과 같이 객체.메소드로 호출한다
ex) cat.setName("boby");

setName 메소드 호출을 위해 수정하면 아래 코드와 같이 된다.

public class Animal {
	string name;
	
	public void setName(String name){
		this.name = name;
	}

	public static void main(String[] args){
		Animal cat = new Animal();
		cat.setName("boby");
		System.out.println(cat.name);
	}
}

setName 메소드의 this.name = name; 문장은 this.name = "boby"; 로 해석 될 것이다.

메소드 내부에 사용된 this는 Animal 클래스에 의해 생성된 객체를 지칭한다.

Animal cat = new Animal() 으로 cat 객체를 만들고 cat.setName("boby"); 로 setName 메소드를 호출하면
Animal 클래스 setName 메소드의 this.name = name; 구문에서 this는 cat이 될 것이다.

정확한 이해를 위해 main메소드에 dog 객체로 setName 메소드를 호출하여 this에 대해 한번 더 확인해보자

public class Animal {
	string name;
	
	public void setName(String name){
		this.name = name;
	}

	public static void main(String[] args){
		Animal cat = new Animal();
		Animal dog = new Animal();
		cat.setName("boby");
		dog.setName("happy");
		System.out.println(cat.name);
		System.out.println(dog.name);
	}
}

위의 코드로 알 수 있는 점은 cat이라는 객체와 dog라는 객체가 모두 setName 메소드를 사용하면서
this.name = name; 이라는 구문을 사용했지만 
System.out.println(cat.name);
System.out.println(dog.name);
으로 출력했을 땐 각각 다른 결과인 boby와 happy가 출력되며, 객체 변수는 공유하지 않는다는 것을 확인 할 수 있다

클래스에서 객체 변수의 값이 독립적이라는 것이 클래스의 존재 이유이며, 객체 지향적이다 라고 할 수 있는 이유이다.


출처 : https://wikidocs.net/214